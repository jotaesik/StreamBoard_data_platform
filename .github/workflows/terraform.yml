name: Terraform

on:
  push:
    branches:
      - feature/destroy # feature/destroy 브랜치에 push 시 실행
  pull_request:
    branches:
      - develop


jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production # 배포 환경 지정 (예: production, staging)

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          working_directory: INFRA # Terraform 작업 디렉토리 설정

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.ref == 'refs/heads/develop'  # develop 브랜치에서만 plan 실행
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/develop' && github.event_name == 'pull_request'  # develop 브랜치 pull request merge 시 apply 실행
        run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        id: destroy
        if: github.ref == 'refs/heads/feature/destroy' && github.event_name == 'push'  # feature/destroy 브랜치 push 시 destroy 실행
        run: terraform destroy -auto-approve -input=false