name: Terraform

on:
  push:
    branches:
      - feature/tfapply # feature/tfapply 브랜치에 push 시 실행
      - feature/destroy # feature/destroy 브랜치에 push 시 실행

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production # 배포 환경 지정 (예: production, staging)

    env:
      KAFKA_BOOTSTRAP_SERVERS: ${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}
      MONGO: ${{ secrets.MONGO }}
      MONGO_COLLECTION_NAME: ${{ secrets.MONGO_COLLECTION_NAME }}
      MONGO_DATABASE_NAME: ${{ secrets.MONGO_DATABASE_NAME }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      MYSQL_URI: ${{ secrets.MYSQL_URI }}
      NIFI_URL: ${{ secrets.NIFI_URL }}
      POSTGRESQL_DATABASE: ${{ secrets.POSTGRESQL_DATABASE }}
      POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
      POSTGRESQL_USERNAME: ${{ secrets.POSTGRESQL_USERNAME }}
      AIRFLOW_DATABASE_PASSWORD: ${{ secrets.AIRFLOW_DATABASE_PASSWORD }}
      AIRFLOW_EMAIL: ${{ secrets.AIRFLOW_EMAIL }}
      AIRFLOW_FERNET_KEY: ${{ secrets.AIRFLOW_FERNET_KEY }}
      AIRFLOW_PASSWORD: ${{ secrets.AIRFLOW_PASSWORD }}
      AIRFLOW_SECRET_KEY: ${{ secrets.AIRFLOW_SECRET_KEY }}
      AIRFLOW_USERNAME: ${{ secrets.AIRFLOW_USERNAME }}
      

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # use develop branch
        with:
          ref: develop

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: path debug
        run: pwd && ls -al && cd INFRA && pwd && ls -al

      # - name: Terraform Format
      #   id: fmt
      #   run: cd INFRA && terraform fmt -check
      # 에러 발생시키는 기능이라 주석 처리함

      - name: Terraform Init
        id: init
        run: cd INFRA && terraform init

      - name: Terraform Validate
        id: validate
        run: cd INFRA && terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: cd INFRA && terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/feature/tfapply' && github.event_name == 'push'  # feature/tfapply 브랜치 push 시 apply 실행
        run: cd INFRA && terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        id: destroy
        if: github.ref == 'refs/heads/feature/destroy' && github.event_name == 'push'  # feature/destroy 브랜치 push 시 destroy 실행
        run: cd INFRA && terraform destroy -auto-approve -input=false