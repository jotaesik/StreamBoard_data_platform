terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }

  required_version = ">= 1.2.0"
}

# AWS Provider 설정
provider "aws" {
  region = "ap-northeast-2" # 서울 리전
}

# VPC 생성
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16" # VPC CIDR 블록
  enable_dns_hostnames = true # DNS 호스트 이름 활성화
  enable_dns_support   = true # DNS 지원 활성화

  tags = {
    Name = "main-vpc"
  }
}

# Internet Gateway 생성
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main-igw"
  }
}

# 서브넷 라우팅 테이블 설정 (모든 서브넷에 대해 VPC 라우팅 설정)
resource "aws_route_table" "main" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id # 인터넷 게이트웨이 연결 (필요한 경우)
  }

  tags = {
    Name = "main-route-table"
  }
}

resource "aws_route_table_association" "msk1" {
  subnet_id = aws_subnet.msk1.id
  route_table_id = aws_route_table.main.id
}

resource "aws_route_table_association" "msk2" {
  subnet_id      = aws_subnet.msk2.id
  route_table_id = aws_route_table.main.id
}

resource "aws_route_table_association" "msk3" {
  subnet_id      = aws_subnet.msk3.id
  route_table_id = aws_route_table.main.id
}

# 서브넷 생성
resource "aws_subnet" "msk1" {
  vpc_id = aws_vpc.main.id
  cidr_block = "10.0.0.0/24"
  availability_zone = "ap-northeast-2a"

  tags = {
    Name = "msk1-subnet"
  }
}

resource "aws_subnet" "msk2" {
  vpc_id = aws_vpc.main.id
  cidr_block = "10.0.0.0/24"
  availability_zone = "ap-northeast-2b"

  tags = {
    Name = "msk2-subnet"
  }
}

resource "aws_subnet" "msk3" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.12.0/24"
  availability_zone = "ap-northeast-2c"

  tags = {
    Name = "msk3-subnet"
  }
}

# Security Groups
# 모든 입출력을 허용하는 보안 그룹 생성 (VPC 내부 IP만 허용)
resource "aws_security_group" "allow_all_internal" {
  vpc_id = aws_vpc.main.id
  name = "allow_all_internal"
  description = "Allow all traffic from internal IPs"

  # 인바운드 규칙: VPC 내부 IP에서 모든 포트 허용
  ingress {
    from_port = 0
    to_port = 65535
    protocol = "tcp"
    cidr_blocks = ["10.0.0.0/16"]  # VPC CIDR 블록으로 변경
  }

  ingress {
    from_port = 0
    to_port = 65535
    protocol = "udp"
    cidr_blocks = ["10.0.0.0/16"]  # VPC CIDR 블록으로 변경
  }

  # 아웃바운드 규칙: 모든 곳으로 모든 트래픽 허용
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_all_internal"
  }
}

resource "aws_kms_key" "kms" {
  description = "encore"
}

resource "aws_msk_cluster" "test" {
  cluster_name           = "test"
  kafka_version          = "3.7.x.kraft"
  number_of_broker_nodes = 3

  client_authentication {
    sasl {
      iam = true
    }
  }

  broker_node_group_info {
    instance_type = "kafka.m5.large"

    client_subnets = [
      aws_subnet.msk1.id,
      aws_subnet.msk2.id,
      aws_subnet.msk3.id,
    ]
    storage_info {
      ebs_storage_info {
        volume_size = 10
      }
    }
    security_groups = [aws_security_group.allow_all_internal.id]
  }

  encryption_info {
    encryption_at_rest_kms_key_arn = aws_kms_key.kms.arn
  }

  tags = {
    name = "main_kafka_cluster"
  }
}
